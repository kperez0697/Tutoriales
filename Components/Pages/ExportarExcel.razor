@page "/ExportarExcel"
@using Entidades
@using OfficeOpenXml
@using OfficeOpenXml.Style
@rendermode InteractiveServer
@inject IJSRuntime js;
<div style="padding-bottom:10px">
    <Button Color="ButtonColor.Success" @onclick="DescargaExcel"> Descargar Excel</Button>
</div>
<Grid TItem="Personal"
Class="table table-hover table-bordered table-striped"
DataProvider="EmployeesDataProvider"
AllowFiltering="true"
AllowPaging="true"
PageSize="5"
AllowSorting="true"
AllowSelection="true"
SelectionMode="GridSelectionMode.Multiple"
SelectedItemsChanged="OnSelectedItemsChanged"
Responsive="true">

    <GridColumns>
        <GridColumn TItem="Personal" HeaderText="Nombre" PropertyName="Nombre" SortKeySelector="item => item.Nombre">
            @context.Nombre
        </GridColumn>
        <GridColumn TItem="Personal" HeaderText="Salario" PropertyName="Salario" SortKeySelector="item => item.Salario">
            @context.Salario
        </GridColumn>
    </GridColumns>

</Grid>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />
@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    private IEnumerable<Personal> ListaPersonal = default!;

    private HashSet<Personal> selectedPersonal = new();

    private async Task<GridDataProviderResult<Personal>> EmployeesDataProvider(GridDataProviderRequest<Personal> request)
    {
        if (ListaPersonal is null) // pull ListaPersonal only one time for client-side filtering, sorting, and paging
            ListaPersonal = GetEmployees(); // call a service or an API to pull the ListaPersonal

        return await Task.FromResult(request.ApplyTo(ListaPersonal));
    }
    private IEnumerable<Personal> GetEmployees()
    {
        return new List<Personal>
        {
            new Personal { Nombre = "Alejandro", Salario = 2600 },
            new Personal { Nombre = "Maria", Salario = 5000 },
            new Personal { Nombre = "Martin", Salario = 10000 },
        };
    }
    private Task OnSelectedItemsChanged(HashSet<Personal> employees)
    {
        selectedPersonal = employees is not null && employees.Any() ? employees : new();
        return Task.CompletedTask;
    }
    async Task DescargaExcel()
    {
        try
        {
            if (ListaPersonal.Count() == 0)
            {
                ToastMessage mensanje = new ToastMessage();
                mensanje.Type = ToastType.Warning;
                mensanje.Message = "No existen registros";
                messages.Add(mensanje);
                return;
            }
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (var Package = new ExcelPackage())
            {
                var worksheet = Package.Workbook.Worksheets.Add("sheet");

                #region Cabecera
                worksheet.Cells[1, 1].Value = "Nombre";
                worksheet.Cells[1, 2].Value = "Salario";
                worksheet.Cells["A1:B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells["A1:B1"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A1:B1"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A1:B1"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A1:B1"].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                worksheet.Column(1).AutoFit();
                worksheet.Column(2).Width = 14;
                #endregion

                int row = 2;
                foreach (var item in ListaPersonal)
                {
                    worksheet.Cells[row, 1].Value = item.Nombre; worksheet.Cells[row, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 2].Value = item.Salario; worksheet.Cells[row, 2].Style.Numberformat.Format = "#,##0.00";
                    row++;
                }
                worksheet.Cells[row, 2].Value = "Total General";
                worksheet.Cells[row, 3].Formula = $"Sum(B2:E{(row - 1)})"; worksheet.Cells[row, 3].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells["A2" + ":B" + (row - 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A2" + ":B" + (row - 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A2" + ":B" + (row - 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                worksheet.Cells["A2" + ":B" + (row - 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                using (var memoria = new MemoryStream())
                {
                    Package.SaveAs(memoria);
                    Package.Dispose();
                    var nombreExcel = string.Concat("Reporte ", DateTime.Now.ToString(), ".xlsx");

                    await js.InvokeAsync<object>("DescargarArchivo", Convert.ToBase64String(memoria.ToArray()),
                    "application/vnd.ms-excel", nombreExcel);
                }
            }
        }
        catch (Exception ex)
        {
            ToastMessage mensanje = new ToastMessage();
            mensanje.Type = ToastType.Danger;
            mensanje.Title = "Error";
            mensanje.Message = ex.Message;
            messages.Add(mensanje);
            return;
        }
    }
}
